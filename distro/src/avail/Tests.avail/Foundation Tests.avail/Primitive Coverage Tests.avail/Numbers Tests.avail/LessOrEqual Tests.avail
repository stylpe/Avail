/*
 * LessOrEqual Tests.avail
 * Copyright © 1993-2020, The Avail Foundation, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of the contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

Module "LessOrEqual Tests"
Versions
	"1.4.0"
Uses
	"Primitive Test Common"
Body

Test "LessOrEqual ok" in primitive numbers test suite is
[
	For each i from -10^20 to 10^20 by 10^19 do
	[
		// ≥ is a rename of ≤, so test it also.
		Require: i ≤ i;
		Require: i ≤ i + 1;
		Require: i ≥ i;
		Require: i + 1 ≥ i;
		
		f ::= i→float;
		Require: f ≤ f;
		Require: f ≤ f + 1.0f;
		Require: f ≥ f;
		Require: f + 1.0f ≥ f;
		
		d ::= i→double;
		Require: d ≤ d;
		Require: d ≤ d + 1.0;
		Require: d ≥ d;
		Require: d + 1.0 ≥ d;
		
		Require: i ≤ f (“i” ++ " vs " ++ “f”);
		Require: i ≤ d;
		Require: f ≤ i;
		Require: f ≤ d;
		Require: d ≤ i;
		Require: d ≤ f;
		Require: i ≥ f;
		Require: i ≥ d;
		Require: f ≥ i;
		Require: f ≥ d;
		Require: d ≥ i;
		Require: d ≥ f;
		
		Require: i ≤ ∞;
		Require: f ≤ ∞;
		Require: d ≤ ∞;
		Require: ∞ ≥ i;
		Require: ∞ ≥ f;
		Require: ∞ ≥ d;

		Require: i ≥ -∞;
		Require: f ≥ -∞;
		Require: d ≥ -∞;
		Require: -∞ ≤ i;
		Require: -∞ ≤ f;
		Require: -∞ ≤ d;
		
		ninff ::= -1.0f ÷ 0.0f;
		inff ::= 1.0f ÷ 0.0f;
		Require: ninff ≤ i;
		Require: i ≤ inff;
		Require: i ≥ ninff;
		Require: ninff ≤ f;
		Require: f ≤ inff;
		Require: f ≥ ninff;
		Require: ninff ≤ d;
		Require: d ≤ inff;
		Require: d ≥ ninff;

		ninfd ::= -1.0 ÷ 0.0;
		infd ::= 1.0 ÷ 0.0;
		Require: ninfd ≤ i;
		Require: i ≤ infd;
		Require: i ≥ ninfd;
		Require: ninfd ≤ d;
		Require: d ≤ infd;
		Require: d ≥ ninfd;
		Require: ninfd ≤ d;
		Require: d ≤ infd;
		Require: d ≥ ninfd;

		nan ::= 0.0 ÷ 0.0;
		Require: ¬i ≤ nan;
		Require: ¬i ≥ nan;
		Require: ¬nan ≥ i;
		Require: ¬nan ≤ i;
		Require: ¬f ≤ nan;
		Require: ¬f ≥ nan;
		Require: ¬nan ≥ f;
		Require: ¬nan ≤ f;
		Require: ¬d ≤ nan;
		Require: ¬d ≥ nan;
		Require: ¬nan ≥ d;
		Require: ¬nan ≤ d;
	];

	// Check the floating point zeros specially.
	Require: -0.0f ≤ 0.0f;
	Require: 0.0f ≤ -0.0f;
	Require: -0.0 ≤ 0.0;
	Require: 0.0 ≤ -0.0;
	Require: -0.0f ≤ 0.0;
	Require: 0.0 ≤ -0.0f;
	Require: -0.0f ≥ 0.0f;
	Require: 0.0f ≥ -0.0f;
	Require: -0.0 ≥ 0.0;
	Require: 0.0 ≥ -0.0;
	Require: -0.0f ≥ 0.0;
	Require: 0.0 ≥ -0.0f;
	
	// Check floating point infinities specially.
	ninff ::= -1.0f ÷ 0.0f;
	inff ::= 1.0f ÷ 0.0f;
	Require: ninff ≤ -∞;
	Require: ninff ≤ ∞;
	Require: -∞ ≥ ninff;
	Require: ∞ ≥ ninff;
	Require: -∞ ≤ inff;
	Require: inff ≤ ∞;
	Require: ∞ ≥ inff;
	Require: inff ≥ -∞;
	
	ninfd ::= -1.0 ÷ 0.0;
	infd ::= 1.0 ÷ 0.0;
	Require: ninfd ≤ -∞;
	Require: ninfd ≤ ∞;
	Require: -∞ ≥ ninfd;
	Require: ∞ ≥ ninfd;
	Require: -∞ ≤ infd;
	Require: infd ≤ ∞;
	Require: ∞ ≥ infd;
	Require: infd ≥ -∞;

	Require: inff ≤ infd;
	Require: infd ≥ inff;
	
	// Check not-a-number.
	nan ::= 0.0 ÷ 0.0;
	Require: ¬nan ≤ nan;
	Require: ¬nan ≥ nan;
];

